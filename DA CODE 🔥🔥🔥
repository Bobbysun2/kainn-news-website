<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>KAINN News & Market Forecast</title>
  <style>
    body {
      margin: 0; font-family: "BBC Reith Sans", Arial, sans-serif; background: #f3f3f3; color: #000;
    }
    header {
      background: #bb1919; color: white; padding: 20px; text-align: center;
    }
    header h1 {
      margin: 0; font-size: 2.5em; letter-spacing: 1px;
    }
    nav {
      background: #a91717; display: flex; justify-content: center; padding: 10px 0;
    }
    nav a {
      color: white; margin: 0 15px; text-decoration: none; font-weight: bold; cursor: pointer;
      padding: 6px 8px;
    }
    nav a:hover, nav a.active {
      text-decoration: underline;
      background: #8f1212;
      border-radius: 4px;
    }
    .container {
      max-width: 1000px; margin: 30px auto; background: white; padding: 20px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); min-height: 600px;
    }
    h2 {
      color: #bb1919;
    }
    .timestamp {
      color: #666; font-size: 0.9em; margin-bottom: 15px;
    }
    .content {
      font-size: 1.1em; line-height: 1.8em;
      white-space: pre-line;
    }
    .button {
      display: inline-block; margin-top: 25px; padding: 10px 20px;
      background: #bb1919; color: white; text-decoration: none; font-weight: bold;
      border-radius: 3px; cursor: pointer; border: none;
    }
    .saved-articles {
      margin-top: 45px;
    }
    .saved-articles h3 {
      border-bottom: 2px solid #ccc; padding-bottom: 8px; margin-bottom: 15px;
    }
    .article-box {
      display: flex; flex-direction: column; gap: 10px;
    }
    .article-card {
      background: #fff; padding: 15px; border: 1px solid #ddd; margin-bottom: 15px;
      box-shadow: 1px 1px 5px rgba(0,0,0,0.05);
      transition: box-shadow 0.3s ease;
    }
    .article-card:hover {
      box-shadow: 1px 3px 8px rgba(0,0,0,0.15);
    }
    .article-card h4 {
      margin: 0 0 5px 0; font-size: 1.15em;
    }
    .article-card .card-category {
      font-size: 0.85em; color: #777; margin-bottom: 8px;
    }
    .article-card a {
      color: #bb1919; text-decoration: none; cursor: pointer;
      font-weight: bold;
    }
    footer {
      background: #222; color: #aaa; padding: 15px; text-align: center; font-size: 0.85em; margin-top: 40px;
    }
    #stock-predictor {
      display: none;
    }
    canvas {
      max-width: 100%; height: 400px; margin-top: 30px;
    }
    label {
      display: block; margin: 10px 0 5px;
    }
    select {
      padding: 6px 8px; font-size: 1em; margin-bottom: 10px;
    }
    #prediction-text {
      margin-top: 20px; font-size: 1.1em;
    }
    #story-image {
      width: 100%; max-height: 300px; object-fit: cover; margin-bottom: 20px; border-radius: 4px;
    }
  </style>
</head>
<body>

<header>
  <h1>KAINN News & Market Forecast</h1>
</header>
<nav>
  <a href="#" id="nav-home" class="active">Home</a>
  <a href="#" id="nav-politics">Government Affairs</a>
  <a href="#" id="nav-weird">Oddities</a>
  <a href="#" id="nav-economy">Financial Insights</a>
  <a href="#" id="nav-culture">Cultural Commentary</a>
  <a href="#" id="nav-stock">Market Forecast</a>
</nav>

<div class="container" id="news-container">
  <h2 id="headline">Loading...</h2>
  <div class="timestamp">Published: <span id="date"></span></div>
  <img id="story-image" src="" alt="news image" />
  <div class="content" id="content"></div>
  <button class="button" id="generate-story-btn">Generate New Story</button>

  <div class="saved-articles">
    <h3>More Stories</h3>
    <div id="articles" class="article-box"></div>
  </div>
</div>

<div class="container" id="stock-predictor">
  <h2>Stock Market Predictor</h2>
  <label for="stock-select">Select Stock:</label>
  <select id="stock-select">
    <option value="AAPL">Apple (AAPL)</option>
    <option value="GOOGL">Alphabet (GOOGL)</option>
    <option value="TSLA">Tesla (TSLA)</option>
    <option value="AMZN">Amazon (AMZN)</option>
    <option value="MSFT">Microsoft (MSFT)</option>
  </select>
  <button class="button" id="predict-btn">Get Prediction</button>

  <canvas id="stock-chart"></canvas>
  <div id="prediction-text"></div>
</div>

<footer>
  Â© 2025 KAINN News Network. KAINN is not affiliated with BBC News.
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // ðŸ”‘ INSERT YOUR OPENAI API KEY HERE ðŸ”‘
  const API_KEY = "YOUR_API_KEY_HERE";

  // Nav Elements
  const navLinks = {
    home: document.getElementById('nav-home'),
    politics: document.getElementById('nav-politics'),
    weird: document.getElementById('nav-weird'),
    economy: document.getElementById('nav-economy'),
    culture: document.getElementById('nav-culture'),
    stock: document.getElementById('nav-stock'),
  };

  // Containers
  const containers = {
    news: document.getElementById('news-container'),
    stock: document.getElementById('stock-predictor'),
  };

  function showSection(section) {
    for (const key in containers) {
      containers[key].style.display = (key === section) ? 'block' : 'none';
    }
    for (const key in navLinks) {
      navLinks[key].classList.toggle('active', key === section);
    }
  }

  // Initially show news
  showSection('news');

  // Categories
  const categories = ['politics', 'weird', 'economy', 'culture'];

  // Category prompts and image keywords
  const categoryDetails = {
    politics: {
      prompt: "Write a formal, long BBC-style article about Jyle using his JFC funds to fake pay for Antonio's Pizza scandal.",
      imgKeywords: ["government", "parliament", "office"]
    },
    weird: {
      prompt: "Write a bizarre, BBC-style detailed article about scientists debating the true meaning of bread, with humor and surreal elements.",
      imgKeywords: ["bread", "bakery", "science"]
    },
    economy: {
      prompt: "Write a satirical long-form BBC-style financial article about fan clubs like JFC influencing pizza payments and their economic impact.",
      imgKeywords: ["money", "finance", "stocks"]
    },
    culture: {
      prompt: "Write a deep cultural commentary in BBC tone about fan clubs' social influence, focusing on Jyle's JFC phenomenon.",
      imgKeywords: ["culture", "society", "people"]
    }
  };

  // Elements for story display
  const headlineEl = document.getElementById('headline');
  const dateEl = document.getElementById('date');
  const contentEl = document.getElementById('content');
  const storyImg = document.getElementById('story-image');
  const articlesContainer = document.getElementById('articles');

  // Generate a random image URL from Unsplash for category
  function getImageUrl(category) {
    const keywords = categoryDetails[category].imgKeywords;
    const keyword = keywords[Math.floor(Math.random() * keywords.length)];
    // Unsplash random photo with keyword and size
    return `https://source.unsplash.com/800x400/?${keyword}&sig=${Math.floor(Math.random() * 1000)}`;
  }

  // Get storage key based on category and 10-min interval
  function getStorageKey(category) {
    const now = new Date();
    return `kainn-${category}-${now.getFullYear()}-${now.getMonth()}-${now.getDate()}-${now.getHours()}-${Math.floor(now.getMinutes() / 10)}`;
  }

  // Save article to localStorage
  function saveArticle(category, article) {
    const key = getStorageKey(category);
    let saved = JSON.parse(localStorage.getItem(`kainn-${category}-all`)) || [];
    // Avoid duplicates by key
    if (!saved.find(a => a.key === key)) {
      saved.push({ ...article, key });
      localStorage.setItem(`kainn-${category}-all`, JSON.stringify(saved));
    }
  }

  // Load saved articles for a category
  function loadArticles(category) {
    const saved = JSON.parse(localStorage.getItem(`kainn-${category}-all`)) || [];
    articlesContainer.innerHTML = '';
    saved.slice().reverse().forEach(article => {
      const card = document.createElement('div');
      card.className = 'article-card';
      card.innerHTML = `
        <div class="card-category">${capitalize(category)}</div>
        <h4><a href="#" data-key="${article.key}" data-category="${category}">${article.headline}</a></h4>
        <div class="timestamp">${article.date}</div>
      `;
      articlesContainer.appendChild(card);
    });

    // Add click event for article links to load article
    articlesContainer.querySelectorAll('a').forEach(link => {
      link.onclick = (e) => {
        e.preventDefault();
        const key = link.getAttribute('data-key');
        const cat = link.getAttribute('data-category');
        const savedArticles = JSON.parse(localStorage.getItem(`kainn-${cat}-all`)) || [];
        const art = savedArticles.find(a => a.key === key);
        if (art) {
          showArticle(art);
        }
      };
    });
  }

  function showArticle(article) {
    headlineEl.textContent = article.headline;
    dateEl.textContent = article.date;
    contentEl.textContent = article.content;
    storyImg.src = article.imageUrl;
    storyImg.alt = article.headline;
  }

  // Capitalize helper
  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // Generate story by calling OpenAI API
  async function generateStory(category) {
    headlineEl.textContent = "Generating story...";
    contentEl.textContent = "";
    dateEl.textContent = "";
    storyImg.src = "";
    try {
      const prompt = categoryDetails[category].prompt;
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
            { role: "system", content: "You are a professional BBC news article writer." },
            { role: "user", content: prompt }
          ],
          max_tokens: 900,
          temperature: 0.7,
        }),
      });
      if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
      const data = await response.json();
      let articleText = data.choices[0].message.content.trim();

      // Extract headline from first line if formatted or create a default
      let headline = "Jyle and the JFC Fan Club Scandal";
      const firstLineEnd = articleText.indexOf('\n');
      if (firstLineEnd !== -1 && articleText.slice(0, firstLineEnd).length < 100) {
        headline = articleText.slice(0, firstLineEnd).replace(/["']/g, '').trim();
        articleText = articleText.slice(firstLineEnd).trim();
      }

      const now = new Date();
      const dateStr = now.toLocaleString();

      const imageUrl = getImageUrl(category);

      const article = {
        headline,
        date: dateStr,
        content: articleText,
        imageUrl,
      };

      showArticle(article);
      saveArticle(category, article);
      loadArticles(category);
    } catch (err) {
      headlineEl.textContent = "Error generating story.";
      contentEl.textContent = err.message;
    }
  }

  // Event handling for nav links and generating stories
  function setupNavigation() {
    Object.entries(navLinks).forEach(([key, el]) => {
      el.onclick = (e) => {
        e.preventDefault();
        if (key === "stock") {
          showSection("stock");
        } else {
          showSection("news");
          currentCategory = key === "home" ? "politics" : key;
          loadArticles(currentCategory);
          generateStory(currentCategory);
        }
      };
    });
  }

  // Current category default
  let currentCategory = "politics";

  document.getElementById("generate-story-btn").onclick = () => {
    generateStory(currentCategory);
  };

  setupNavigation();
  loadArticles(currentCategory);
  generateStory(currentCategory);

  // === Stock Market Predictor ===

  const stockSelect = document.getElementById('stock-select');
  const predictBtn = document.getElementById('predict-btn');
  const predictionText = document.getElementById('prediction-text');
  const ctx = document.getElementById('stock-chart').getContext('2d');

  // Dummy historical data generator for 30 days
  function generateHistoricalData(base) {
    const data = [];
    let price = base;
    for (let i = 29; i >= 0; i--) {
      price += (Math.random() - 0.5) * 2; // small daily change
      price = Math.max(1, price);
      const date = new Date();
      date.setDate(date.getDate() - i);
      data.push({ date: date.toISOString().split('T')[0], price: price.toFixed(2) });
    }
    return data;
  }

  let chart;

  function initChart(stockSymbol) {
    const basePrices = {
      AAPL: 160,
      GOOGL: 2800,
      TSLA: 650,
      AMZN: 3300,
      MSFT: 300,
    };
    const historicalData = generateHistoricalData(basePrices[stockSymbol] || 100);
    const labels = historicalData.map(d => d.date);
    const prices = historicalData.map(d => d.price);

    if (chart) chart.destroy();

    chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: `${stockSymbol} Historical Price ($)`,
          data: prices,
          borderColor: '#bb1919',
          backgroundColor: 'rgba(187, 25, 25, 0.2)',
          fill: true,
          tension: 0.3,
          pointRadius: 2,
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: false },
          x: { display: true }
        },
        plugins: {
          legend: { display: true }
        }
      }
    });
  }

  async function fetchStockPrediction(stockSymbol) {
    predictionText.textContent = "Predicting future prices...";
    try {
      // Call OpenAI to generate future 5-day prices in JSON format
      const prompt = `Provide a 5-day stock price prediction for ${stockSymbol} starting from tomorrow. Return ONLY a JSON array of 5 numbers, representing predicted closing prices.`;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
            { role: "system", content: "You are a financial analyst assistant." },
            { role: "user", content: prompt }
          ],
          max_tokens: 100,
          temperature: 0.5,
        }),
      });
      if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
      const data = await response.json();
      const raw = data.choices[0].message.content.trim();

      // Parse JSON numbers from response (best effort)
      let predictedPrices = [];
      try {
        predictedPrices = JSON.parse(raw);
        if (!Array.isArray(predictedPrices)) throw new Error("Not an array");
      } catch {
        // Try to extract numbers manually
        predictedPrices = raw.match(/[\d.]+/g)?.map(Number) || [];
      }

      if (predictedPrices.length === 0) throw new Error("No predictions found");

      // Update chart with predictions appended
      const lastDate = chart.data.labels[chart.data.labels.length - 1];
      const nextDates = [];
      for(let i=1; i<=predictedPrices.length; i++) {
        const d = new Date(lastDate);
        d.setDate(d.getDate() + i);
        nextDates.push(d.toISOString().split('T')[0]);
      }

      chart.data.labels.push(...nextDates);
      chart.data.datasets[0].data.push(...predictedPrices.map(p => p.toFixed(2)));
      chart.data.datasets[0].label = `${stockSymbol} Historical + Predicted Price ($)`;
      chart.update();

      predictionText.textContent = `Predicted closing prices for next ${predictedPrices.length} days: ${predictedPrices.map(p => `$${p.toFixed(2)}`).join(', ')}`;
    } catch (err) {
      predictionText.textContent = "Failed to get prediction: " + err.message;
    }
  }

  // Init chart on page load
  initChart(stockSelect.value);

  stockSelect.onchange = () => {
    initChart(stockSelect.value);
    predictionText.textContent = "";
  };
  predictBtn.onclick = () => {
    fetchStockPrediction(stockSelect.value);
  };

</script>

</body>
</html>
